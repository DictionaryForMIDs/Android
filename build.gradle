buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.github.triplet.gradle:play-publisher:1.1.5'
    }
}

plugins {
    id "com.mendhak.gradlecrowdin" version "0.0.9"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'validateReleaseSigning') {
        task.dependsOn readPasswordFromInput
    }
    if (task.name == 'validateReleaseSigning') {
        tasks.assembleRelease.doLast {
            tasks.createReleaseZip.execute()
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: "com.mendhak.gradlecrowdin"

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.android.support:support-v4:23.+'
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':DictionaryForMIDs_Core')
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
}

android {
    compileSdkVersion 23
    buildToolsVersion "25.0.1"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        applicationId 'de.kugihan.dictionaryformids.hmi_android'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // Use properties from file gradle.properties
            storeFile file(releaseStoreFile)
            storePassword releaseStorePassword
            keyAlias releaseStoreKeyAlias
            keyPassword releaseStoreKeyPassword
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    // Enable signing of release if property is set in file gradle.properties
    if (releaseSigning == "true") {
        buildTypes.release.signingConfig signingConfigs.release
    }

}

task readPasswordFromInput << {
    def console = System.console()

    if (android.signingConfigs.release.storePassword == "") {
        ext.storePassword = console.readPassword('\n> Enter Store password: ')
        android.signingConfigs.release.storePassword = new String(ext.storePassword)
    }
    if (android.signingConfigs.release.keyPassword == "") {
        def msg = '\n> Enter password for key "' + android.signingConfigs.release.keyAlias + '": '
        ext.keyPassword = console.readPassword(msg)
        android.signingConfigs.release.keyPassword = new String(ext.keyPassword)
    }

    console.println()
}

task createReleaseZip(type: Zip, dependsOn: "assembleRelease") {
    def versionName = getVersionName()
    def releaseFile = file("${buildDir}/outputs/apk/DictionaryForMIDs_Android-release.apk");
    assert releaseFile.exists()
    from(releaseFile.getParent()) {
        include releaseFile.getName()
        rename releaseFile.getName(), 'DictionaryForMIDs.apk'
    }
    assert file("../COPYING").exists()
    assert file("../README").exists()
    from("../") {
        include 'COPYING'
        include 'README'
        expand versionName: versionName
    }
    archiveName project.name + '_' + versionName + '.' + extension
}

import javax.xml.parsers.DocumentBuilderFactory
def getVersionName() {
    def builderFactory = DocumentBuilderFactory.newInstance()
    builderFactory.setNamespaceAware(true)
    def manifestXml = builderFactory.newDocumentBuilder().parse(project.file(android.sourceSets.main.manifest.srcFile)).documentElement
    def versionName = manifestXml.getAttributeNS("http://schemas.android.com/apk/res/android", "versionName")
    return versionName
}

crowdinDownload{
    projectId = crowdinProjectId
    apiKey = crowdinApiKey
    destination = "$projectDir"

    // Exclude store description files which are saved as .txt on crowdin
    excludePattern = '**/*.txt'
}

apply plugin: 'com.github.triplet.play'

play {
    jsonFile = file(playJsonFile)
}